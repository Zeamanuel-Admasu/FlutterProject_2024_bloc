// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_application_1/test/unit_test/booking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_application_1/application/token_bloc.dart' as _i2;
import 'package:flutter_application_1/infrastructure/Repository/booking_repository.dart'
    as _i3;
import 'package:flutter_application_1/Presentation/others/bookingsClass.dart'
    as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTokenState_0 extends _i1.SmartFake implements _i2.TokenState {
  _FakeTokenState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingRepository extends _i1.Mock implements _i3.BookingRepository {
  MockBookingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.ReservedTable>> fetchBookings(
    String? type,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBookings,
          [
            type,
            token,
          ],
        ),
        returnValue:
            _i4.Future<List<_i5.ReservedTable>>.value(<_i5.ReservedTable>[]),
      ) as _i4.Future<List<_i5.ReservedTable>>);
}

/// A class which mocks [TokenBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenBloc extends _i1.Mock implements _i2.TokenBloc {
  MockTokenBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TokenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTokenState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.TokenState);

  @override
  _i4.Stream<_i2.TokenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.TokenState>.empty(),
      ) as _i4.Stream<_i2.TokenState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i2.TokenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.TokenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.TokenState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.TokenEvent>(
    _i6.EventHandler<E, _i2.TokenState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i2.TokenEvent, _i2.TokenState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i6.Change<_i2.TokenState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
